import React, { useEffect, useState } from "react";
import TitleCard from "../../../components/Cards/TitleCard";
import UsersIcon from "@heroicons/react/24/outline/UsersIcon";
import EllipsisVerticalIcon from "@heroicons/react/24/outline/EllipsisVerticalIcon";
import { useDispatch, useSelector } from "react-redux";
import { openRightDrawer } from "../../common/rightDrawerSlice";
import {
  MODAL_BODY_TYPES,
  RIGHT_DRAWER_TYPES,
  TYPES_DELETE,
} from "../../../utils/globalConstantUtil";
import { openModal } from "../../common/modalSlice";
import { formatPrice } from "../../../components/Input/Format";
import moment from "moment";
import { showNotification } from "../../common/headerSlice";
import { fetchPDFHome } from "./service/fetchPDFHome";

const getDummyStatus = (role) => {
  switch (role) {
    case "0":
      return (
        <div className="badge border-none bg-green-100 text-green-800 text-xs font-medium rounded ">
          Ph√≤ng tr·ªëng
        </div>
      );
    case "1":
      return (
        <div className="badge border-none bg-blue-200 text-gray-800 text-xs font-medium rounded ">
          S·∫Øp tr·ªëng
        </div>
      );
    case "2":
      return (
        <div className="badge border-none bg-red-100 text-yellow-800 text-xs font-medium rounded ">
          ƒê√£ ƒë·∫∑t c·ªçc
        </div>
      );

    case "3":
      return (
        <div className="badge border-none bg-amber-100 text-red-800 text-xs font-medium rounded ">
          ƒê√£ cho thu√™
        </div>
      );

    case "4":
      return (
        <div className="badge border-none bg-yellow-100 text-yellow-800 text-xs font-medium rounded ">
          H·ª£p ƒë·ªìng qu√° h·∫°n
        </div>
      );

    case "5":
      return (
        <div className="badge border-none bg-yellow-100 text-yellow-800 text-xs font-medium rounded ">
          ƒêang n·ª£ ti·ªÅn
        </div>
      );
    default:
      return (
        <div className="badge border-none bg-green-100 text-green-800 text-xs font-medium rounded ">
          Ph√≤ng tr·ªëng
        </div>
      );
  }
};

function ListRooms({ filterRooms }) {
  //console.log("filterRooms in   lisrom:", filterRooms);
  const { rooms } = useSelector((state) => state.rooms);
  const { selectedHome } = useSelector((state) => state.rooms);
  console.log("üöÄ ~ ListRooms ~ selectedHome:", selectedHome)

  console.log("rooms:", rooms);
  const dispatch = useDispatch();

  const openRightDrawerListHome = (roomId, roomCode) => {
    dispatch(
      openRightDrawer({
        header: `Th√¥ng tin chi ti·∫øt ph√≤ng`,
        content: "Ch·ªçn danh nh√† c·ªßa b·∫°n ƒë·ªÉ qu·∫£n l√Ω chi ti·∫øt ph√≤ng",
        bodyType: RIGHT_DRAWER_TYPES.DETAILS_ROOM,
        extraObject: {
          roomId: roomId,
          roomCode: roomCode,
        },
      })
    );
  };

  const openRightDrawerDepositRoom = (
    roomId,
    roomCode,
    rentPrice,
    depositId
  ) => {
    dispatch(
      openRightDrawer({
        header: `T·∫°o h·ª£p ƒë·ªìng c·ªçc gi·ªØ ch·ªó`,
        content: "Vui l√≤ng ƒëi·ªÅn th√¥ng tin d∆∞·ªõi ƒë√¢y ƒë·ªÉ l√™n h·ª£p ƒë·ªìng",
        bodyType: RIGHT_DRAWER_TYPES.DEPOSIT_ROOM,
        extraObject: {
          roomId,
          roomCode,
          rentPrice,
          depositId,
        },
      })
    );
  };

  const openRightDrawerAddCustomer = (
    roomId,
    contractId,
    numberOfResidents
  ) => {
    if (contractId === null) {
      dispatch(
        showNotification({ message: "Ph√≤ng ch∆∞a c√≥ h·ª£p ƒë·ªìng", status: 0 })
      );
    } else {
      dispatch(
        openRightDrawer({
          header: `Th√™m kh√°ch h√†ng`,
          content: "Vui l√≤ng ƒëi·ªÅn th√¥ng tin d∆∞·ªõi ƒë√¢y ƒë·ªÉ th√™m kh√°ch h√†ng",
          bodyType: RIGHT_DRAWER_TYPES.ADD_CUSTOMER,
          extraObject: { roomId, contractId, numberOfResidents },
        })
      );
    }
  };

  const openRightDrawerExportContract = (
    roomId,
    roomCode,
    rentPrice,
    contractId,
    depositId
  ) => {
    console.log(contractId, depositId);
    if (!contractId) {
      dispatch(
        showNotification({
          message: "Ph√≤ng n√†y ch∆∞a c√≥ h·ª£p ƒë·ªìng",
          status: 0,
        })
      );
    } else {
      dispatch(
        openRightDrawer({
          header: "Th√¥ng tin h·ª£p ƒë·ªìng",
          bodyType: RIGHT_DRAWER_TYPES.EXPORT_CONTRACT_ROOM,
          extraObject: {
            contractId: contractId,
            depositId: depositId,
          },
        })
      );
    }
  };

  const openRightDrawerContractRoom = (
    roomId,
    roomCode,
    rentPrice,
    contractId,
    depositId
  ) => {
    dispatch(
      openRightDrawer({
        header: `T·∫°o h·ª£p ƒë·ªìng kh√°ch thu√™`,
        content: "Vui l√≤ng nh·∫≠p c√°c th√¥ng tin d∆∞·ªõi ƒë√¢y ƒë·ªÉ l√™n h·ª£p ƒë·ªìng.",
        bodyType: RIGHT_DRAWER_TYPES.CONTRACT_ROOM,
        extraObject: {
          roomId,
          roomCode,
          rentPrice,
          contractId,
          depositId,
        },
      })
    );
  };

  const openModalConformDeleteRoom = (roomId, password, index) => {
    dispatch(
      openModal({
        title: "Xo√° ph√≤ng",
        bodyType: MODAL_BODY_TYPES.CONFIRMATION_DELETE_CODE,
        extraObject: {
          type: TYPES_DELETE.DELETE_ROOM,
          message: `B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën xo√° ph√≤ng n√†y?T·∫•t c·∫£ d·ªØ li·ªáu s·∫Ω b·ªã x√≥a vƒ©nh vi·ªÖn kh·ªèi m√°y ch·ªß. H√†nh ƒë·ªông n√†y kh√¥ng th·ªÉ ƒë∆∞·ª£c ho√†n t√°c.Vui l√≤ng nh·∫≠p m√£ ph√≤ng ƒë·ªÉ x√°c nh·∫≠n`,
          id: roomId,
          index: index,
          password: password,
        },
      })
    );
  };

  const openModalMoveRoom = (contractId, depositId) => {
    if (!contractId && !depositId) {
      dispatch(
        showNotification({
          message: "Ph√≤ng ch∆∞a c√≥ c·ªçc v√† h·ª£p ƒë·ªìng thu√™",
          status: 0,
        })
      );
    } else {
      dispatch(
        openModal({
          title: "Chuy·ªÉn ph√≤ng",
          bodyType: MODAL_BODY_TYPES.MOVE_ROOM,
          extraObject: {
            contractId: contractId,
            depositId: depositId,
          },
        })
      );
    }
  };

  const handleFilterRoom = () => {
    let arrTemp = [...rooms];

    arrTemp = arrTemp // h√†m l·ªçc t√¨m check n·∫øu kh c√≥ c√°i n√†o ƒë∆∞·ª£c check th√¨ render th·∫≥ng, n·∫øu c√≥ check l·ªçc th√¨ v√¥ h√†m filter
      .filter((item) =>
        filterRooms.filter.length // ki·ªÉm tra c√≥ check l·ªçc kh√¥ng
          ? filterRooms.filter.includes(item.status)
          : true
      );

    arrTemp = arrTemp // h√†m l·ªçc search n√≥ s·∫Ω filter nh·ªØng k√≠ t·ª± t·ªìn t·∫°i sau khi ƒë√£ ƒë∆∞·ª£c filter ·ªü tr√™n
      .filter((item) => {
        return item?.roomCode?.includes(filterRooms.search);
      });

    return arrTemp;
  };


  const exportDeposit = (depositId, coderoom) => {
    // console.log("coderoom ", coderoom);
    if (depositId, coderoom) {
      dispatch(fetchPDFHome({
        depositId: depositId,
        coderoom: coderoom,
        name: selectedHome.name
      }));
    } else {
      dispatch(
        showNotification({
          message: "Phong chua co coc",
          status: 0,
        })
      );
    }
  };
  return (
    <>
      <TitleCard topMargin="mt-2">
        <div>
          <table className="table w-full">
            <thead>
              <tr>
                <th className="font-normal">STT</th>
                <th className="font-normal">NG∆Ø·ªúI ƒê·∫†I DI·ªÜN</th>
                <th className="font-normal">M√É PH√íNG</th>
                <th className="font-normal">GI√Å THU√ä (VND)</th>
                <th className="font-normal">ƒê·∫∂T C·ªåC (VNƒê)</th>
                <th className="font-normal">TI·ªÄN N·ª¢ (VNƒê)</th>
                <th className="font-normal">NG√ÄY K·∫æT TH√öC H·ª¢P ƒê·ªíNG</th>
                <th className="font-normal">TR·∫†NG TH√ÅI</th>
                <th></th>
              </tr>
            </thead>
            <tbody className="overflow-x-auto">
              {rooms.length > 0 &&
                handleFilterRoom().map((l, index) => {

                  return (
                    <tr
                      key={index}
                      className="bg-white border-b dark:bg-gray-800 dark:border-gray-700"
                    >
                      <td>{index + 1}</td>

                      <td>
                        <div className="flex items-center gap-4">
                          <div className="font-medium dark:text-white">
                            <div>
                              {l.roomRepresentation
                                ? l.roomRepresentation
                                : "Ch∆∞a c√≥"}
                            </div>
                            <div className="text-sm text-gray-500 dark:text-gray-400">
                              <div className="flex">
                                <UsersIcon className="w-5" />{" "}
                                {l.numberOfResidents
                                  ? l.numberOfResidents
                                  : " 0"}
                                {" ng∆∞·ªùi"}
                              </div>
                            </div>
                          </div>
                        </div>
                      </td>
                      <td>P.{l.roomCode}</td>
                      <td>{formatPrice(l.rentPrice)}ƒë</td>
                      <td>{formatPrice(l.depositAmount)}ƒë</td>
                      <td>{l.debtPrice ? l.debtPrice : "0 ƒë"}</td>
                      <td>
                        {l.contractEndDate !== "0001-01-01T00:00:00" ? (
                          moment(l.contractEndDate).format("DD-MM-YYYY")
                        ) : (
                          <span className="font-medium">--</span>
                        )}
                      </td>
                      <td>{getDummyStatus(l.status ? l.status : 1)}</td>
                      <td>
                        <div className="dropdown dropdown-left">
                          <div tabIndex={0} role="button" className="m-1 w-5">
                            <EllipsisVerticalIcon />
                          </div>
                          <ul
                            tabIndex={0}
                            className="dropdown-content z-[1] menu p-2 shadow bg-base-100 rounded-box w-52"
                          >
                            <li>
                              <button
                                onClick={() =>
                                  openRightDrawerListHome(l.id, l.roomCode)
                                }
                              >
                                Xem chi ti·∫øt
                              </button>
                            </li>
                            <li>
                              <button
                                onClick={() =>
                                  openRightDrawerDepositRoom(
                                    l.id,
                                    l.roomCode,
                                    l.rentPrice,
                                    l.depositId
                                  )
                                }
                              >
                                ƒê·∫∑t c·ªçc
                              </button>
                            </li>
                            <li>
                              <button
                                onClick={() => exportDeposit(l.depositId, l.roomCode)}
                              >
                                Xu·∫•t h·ª£p ƒë·ªìng c·ªçc
                              </button>
                            </li>
                            <li>
                              <button
                                onClick={() =>
                                  openRightDrawerContractRoom(
                                    l.id,
                                    l.roomCode,
                                    l.rentPrice,
                                    l.contractId,
                                    l.depositId
                                  )
                                }
                              >
                                H·ª£p ƒë·ªìng thu√™
                              </button>
                            </li>
                            <li>
                              <button
                                onClick={() =>
                                  openRightDrawerExportContract(
                                    l.id,
                                    l.roomCode,
                                    l.rentPrice,
                                    l.contractId,
                                    l.depositId
                                  )
                                }
                              >
                                Xu·∫•t h·ª£p ƒë·ªìng thu√™
                              </button>
                            </li>
                            <li>
                              <button
                                onClick={() =>
                                  openRightDrawerAddCustomer(
                                    l.id,
                                    l.contractId,
                                    l.numberOfResidents
                                  )
                                }
                              >
                                Th√™m kh√°ch h√†ng
                              </button>
                            </li>

                            <li>
                              <button
                                onClick={() =>
                                  openModalMoveRoom(l.contractId, l.depositId)
                                }
                              >
                                Chuy·ªÉn ph√≤ng
                              </button>
                            </li>
                            {/* <li>
                              <button
                                onClick={() => openModalConformDeleteRoom(l.id)}
                              >
                                Xo√° d·ªØ li·ªáu
                              </button>
                            </li> */}
                          </ul>
                        </div>
                      </td>
                    </tr>
                  );
                })}
            </tbody>
          </table>
        </div>
      </TitleCard>
    </>
  );
}

export default ListRooms;
